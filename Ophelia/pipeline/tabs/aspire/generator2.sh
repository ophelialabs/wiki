# Ask for solution name
read -p "Enter your Aspire solution name: " solution_name

if [ -z "$solution_name" ]; then
    echo "Solution name cannot be empty."
    exit 1
fi

# Create solution directory
mkdir "$solution_name"
cd "$solution_name"

# Create solution
dotnet new sln -n "$solution_name"

# Create src projects
dotnet new mvc -n WebApp -o src/WebApp
dotnet new webapi -n AuthService -o src/AuthService
dotnet new webapi -n AccountService -o src/AccountService
dotnet new webapi -n ApiService -o src/ApiService
dotnet new classlib -n DataService -o src/DataService
dotnet new classlib -n Database -o src/Database
dotnet new classlib -n Shared -o src/Shared
</code></pre>

dotnet sln add src/WebApp/WebApp.csproj
dotnet sln add src/AuthService/AuthService.csproj
dotnet sln add src/AccountService/AccountService.csproj
dotnet sln add src/ApiService/ApiService.csproj
dotnet sln add src/DataService/DataService.csproj
dotnet sln add src/Database/Database.csproj
dotnet sln add src/Shared/Shared.csproj

# Create test projects
dotnet new xunit -n WebApp.Tests -o tests/WebApp.Tests
dotnet new xunit -n AuthService.Tests -o tests/AuthService.Tests
dotnet new xunit -n AccountService.Tests -o tests/AccountService.Tests
dotnet new xunit -n ApiService.Tests -o tests/ApiService.Tests
dotnet new xunit -n DataService.Tests -o tests/DataService.Tests

dotnet sln add tests/WebApp.Tests/WebApp.Tests.csproj
dotnet sln add tests/AuthService.Tests/AuthService.Tests.csproj
dotnet sln add tests/AccountService.Tests/AccountService.Tests.csproj
dotnet sln add tests/ApiService.Tests/ApiService.Tests.csproj
dotnet sln add tests/DataService.Tests/DataService.Tests.csproj

# Add references
dotnet add src/WebApp/WebApp.csproj reference src/Shared/Shared.csproj
dotnet add src/AuthService/AuthService.csproj reference src/Shared/Shared.csproj
dotnet add src/AccountService/AccountService.csproj reference src/Shared/Shared.csproj
dotnet add src/ApiService/ApiService.csproj reference src/Shared/Shared.csproj
dotnet add src/DataService/DataService.csproj reference src/Shared/Shared.csproj
dotnet add src/Database/Database.csproj reference src/Shared/Shared.csproj

# Create docker files
mkdir docker
cat > docker/docker-compose.yml << EOF
version: '3.8'
services:
  webapp:
    build:
      context: ../src/WebApp
      dockerfile: Dockerfile.webapp
    ports:
      - "5000:80"
  authservice:
    build:
      context: ../src/AuthService
      dockerfile: Dockerfile.authservice
    ports:
      - "5001:80"
  accountservice:
    build:
      context: ../src/AccountService
      dockerfile: Dockerfile.accountservice
    ports:
      - "5003:80"
  apiservice:
    build:
      context: ../src/ApiService
      dockerfile: Dockerfile.apiservice
    ports:
      - "5002:80"
  dataservice:
    build:
      context: ../src/DataService
      dockerfile: Dockerfile.dataservice
    ports:
      - "5004:80"
  database:
    build:
      context: ../src/Database
      dockerfile: Dockerfile.database
    ports:
      - "5432:5432"
  db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      SA_PASSWORD: "Your_password123"
      ACCEPT_EULA: "Y"
    ports:
      - "1433:1433"
EOF

# Create Dockerfiles for each service
touch docker/Dockerfile.webapp
touch docker/Dockerfile.authservice
touch docker/Dockerfile.accountservice
touch docker/Dockerfile.apiservice
touch docker/Dockerfile.dataservice
touch docker/Dockerfile.database

# Create .env
cat > .env << EOF
ASPIRE_ENV=Development
DB_CONNECTION=Server=localhost;Database=aspire_db;User Id=sa;Password=Your_password123;
EOF

# Create .gitignore
cat > .gitignore << EOF
bin/
obj/
.vs/
.env
docker/*.log
EOF

# Create README.md
cat > README.md << EOF
# $solution_name

Advanced .NET Aspire project generated by script.

## Structure

- WebApp: Main frontend
- AuthService: Authentication/Authorization
- AccountService: Account management
- ApiService: API endpoints
- DataService: Data access
- Database: Database context and migrations
- Shared: Shared models
- Tests: Unit and integration tests
- Docker: Containerization
- Deployment: CI/CD pipelines

## Usage

1. Install .NET 8 SDK and Docker
2. Run \`docker-compose -f docker/docker-compose.yml up\`
3. Run \`dotnet build\` and \`dotnet run --project src/WebApp\`
EOF

# Create deployment pipeline
mkdir deployment
cat > deployment/azure-pipelines.yml << EOF
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'
- script: dotnet build Aspire.sln
- script: dotnet test Aspire.sln
EOF

echo "Aspire solution '$solution_name' created successfully!"
echo "Run 'dotnet build' to compile the solution"
